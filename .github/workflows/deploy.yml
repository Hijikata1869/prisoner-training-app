name: "Deploy to Amazon ECS"

on:
  push:
env:
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create env file
      run: |
        touch ./frontend/.env.production
        echo "${{ secrets.PRODUCTION_SERVER_URL }}" >> ./frontend/.env.production

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push docker image to Amazon ECR(backend)
    #   env:
    #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     REPOSITORY: pta_api
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     docker build --no-cache --build-arg RAILS_MASTER_KEY=${{ env.RAILS_MASTER_KEY }} -f ./Dockerfile -t pta_api .
    #     docker tag pta_api:latest 748732166031.dkr.ecr.ap-northeast-1.amazonaws.com/pta_api:latest
    #     docker push 748732166031.dkr.ecr.ap-northeast-1.amazonaws.com/pta_api:latest
      
    - name: Build, tag, and push docker image to Amazon ECR(frontend)
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: pta_frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --no-cache -f ./frontend/Dockerfile -t pta_frontend ./frontend
        docker tag pta_frontend:latest 748732166031.dkr.ecr.ap-northeast-1.amazonaws.com/pta_frontend:latest
        docker push 748732166031.dkr.ecr.ap-northeast-1.amazonaws.com/pta_frontend:latest