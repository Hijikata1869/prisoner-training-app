name: "Deploy to Amazon ECS"

on:
  push:
env:
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create env file
      run: |
        touch ./frontend/.env.production
        echo "${{ secrets.PRODUCTION_SERVER_URL }}" >> ./frontend/.env.production

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR(backend)
      id: build-api-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: pta_api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --no-cache --build-arg RAILS_MASTER_KEY=${{ env.RAILS_MASTER_KEY }} -f ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
    - name: Build, tag, and push docker image to Amazon ECR(frontend)
      id: build-frontend-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: pta_frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --no-cache -f ./frontend/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Render Amazon ECS task definition for api container
      id: render-api-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: deploy/task-definition.json
        container-name: pta_api
        image: ${{ steps.build-api-image.outputs.image }}
    
    - name: Modify Amazon ECS task definition with frontend container
      id: render-frontend-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-api-container.outputs.task-definition }}
        container-name: pta_frontend
        image: ${{ steps.build-frontend-image.outputs.image }}

    - name: Deploy to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-frontend-container.outputs.task-definition }}
        service: pta-service
        cluster: pta-cluster
        force-new-deployment: true
        wait-for-service-stability: true